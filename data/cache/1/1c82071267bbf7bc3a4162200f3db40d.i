a:17:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"The Store";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1274:"
The store inside an application should be regarded as the in-memory storage of data the application needs to handle.
Its role in the application is the source of all data (or records) in the application and it provides ways to perform queries and searches on that data.
What the store doesn't do is send record instances (objects) around inside the application. This would cause a real management problem as the application then has to track all versions of that record in all parts of the application. Instead, the store sends a reference, a pointer to the record. This reference sometimes looks like an object (materialized), and sometimes it will be an index, the so-called storeKey. The store will keep the original data in its memory as a data hash.
When a record changes, those changes will be automatically forwarded to the store. The store will store the changes in its datahash of that record and propagate all changes throughout the application, making sure that all parts of the applications that have some kind of reference to that data (for example in query results etc) use the same version of that particular record. This automatic propagation of changes is also the reason you need to create, update, refresh or destroy data using the store as an inbetween.";}i:2;i:25;}i:5;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1299;}i:6;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1301;}i:7;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"Application side";i:1;i:3;i:2;i:1301;}i:2;i:1301;}i:8;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1301;}i:9;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1327;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:300:"
The application side of the store interactions consists of the functions find (with or without using a query), createRecord, updateRecord, (retrieveRecord) and destroyRecord. By default the changes these functions cause will be buffered until the function commitChanges is called by the application.";}i:2;i:1328;}i:11;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1628;}i:12;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1628;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:600:"Most data inside desktop grade applications is usually stored in a relational database. Inside these relational databases the data consists of entities and relations. Because the data normally also needs to be represented and searched for in the same way, the store needs models to be able to identify records of a fixed makeup and distinguish between records of the same makeup. These models don't necessarily need to follow the makeup of the database tables but are very useful in managing data. Models inside SC are derived from the SC.Record class and the store uses them to distinguish records.
";}i:2;i:1630;}i:14;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2229;}i:15;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2229;}i:16;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:2229;}}