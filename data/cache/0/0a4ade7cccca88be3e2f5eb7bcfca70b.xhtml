
<h1 class="sectionedit1"><a name="concepts_used_inside_the_sproutcore_framework" id="concepts_used_inside_the_sproutcore_framework">Concepts used inside the Sproutcore framework</a></h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "Concepts used inside the Sproutcore framework" [1-61] -->
<h2 class="sectionedit2"><a name="mvcmodel-view-controller" id="mvcmodel-view-controller">MVC: Model-View-Controller</a></h2>
<div class="level2">

<p>

Sproutcore is an implementation of the Model-View-Controller development paradigm. In implementing this paradigm, the framework follows the implementation model as used in Cocoa/NeXTStep. Two concepts are of major importance in this model: the inheritance model and the observer/binding pattern.
</p>

</div>
<!-- EDIT2 SECTION "MVC: Model-View-Controller" [62-398] -->
<h3 class="sectionedit3"><a name="inheritance_model" id="inheritance_model">Inheritance model</a></h3>
<div class="level3">

<p>

Cocoa is an Object Oriented MVC implementation, in which all objects inherit from a single base object. This base object defines standard behaviour and properties that should be shared by every object in the framework. Sproutcore shares this implementation model. <a href="/~sproutcore/doku.php?id=concepts:sproutcore:inheritance" class="wikilink1" title="concepts:sproutcore:inheritance"> More... </a>
</p>

</div>
<!-- EDIT3 SECTION "Inheritance model" [399-718] -->
<h3 class="sectionedit4"><a name="roles_of_model_view_and_controller" id="roles_of_model_view_and_controller">Roles of Model, View and Controller</a></h3>
<div class="level3">

<p>

In Cocoa the roles of Models, Views and Controllers can deviate from what you are expecting, in the sense that the divisions are quite strict. <a href="/~sproutcore/doku.php?id=concepts:sproutcore:mvcroles" class="wikilink1" title="concepts:sproutcore:mvcroles"> More... </a>
</p>

</div>
<!-- EDIT4 SECTION "Roles of Model, View and Controller" [719-932] -->
<h2 class="sectionedit5"><a name="observer_binding_pattern" id="observer_binding_pattern">Observer/binding pattern</a></h2>
<div class="level2">

</div>
<!-- EDIT5 SECTION "Observer/binding pattern" [933-970] -->
<h3 class="sectionedit6"><a name="bindings" id="bindings">Bindings</a></h3>
<div class="level3">

<p>

To prevent having to write code to update every value in every controller and view, SC uses a binding: a link you define which binds the value from a property on a controller or view to a local property. <a href="/~sproutcore/doku.php?id=concepts:sproutcore:bindings" class="wikilink1" title="concepts:sproutcore:bindings"> More ...</a>
</p>

</div>
<!-- EDIT6 SECTION "Bindings" [971-1219] -->
<h3 class="sectionedit7"><a name="observers" id="observers">Observers</a></h3>
<div class="level3">

<p>

Observers are special type of functions. These functions are executed whenever a property they observe changes value. Observers are intended to be used within objects. <a href="/~sproutcore/doku.php?id=concepts:sproutcore:observers" class="wikilink1" title="concepts:sproutcore:observers"> More... </a>
</p>

</div>
<!-- EDIT7 SECTION "Observers" [1220-1433] -->
<h3 class="sectionedit8"><a name="getters_and_setters" id="getters_and_setters">Getters and Setters</a></h3>
<div class="level3">

<p>

In order to make bindings and observers work inside JavaScript, Sproutcore uses getters and setters. <a href="/~sproutcore/doku.php?id=concepts:sproutcore:getterssetters" class="wikilink1" title="concepts:sproutcore:getterssetters"> More...</a>
</p>

</div>
<!-- EDIT8 SECTION "Getters and Setters" [1434-1595] -->
<h2 class="sectionedit9"><a name="mixins" id="mixins">Mixins</a></h2>
<div class="level2">

<p>

In order to do multiple inheritance without having the hassle to deal with multiple origin changes (which is one of the nastiest parts of OO), SC uses the Mixins concept. <a href="/~sproutcore/doku.php?id=concepts:sproutcore:mixins" class="wikilink1" title="concepts:sproutcore:mixins"> More ...</a>
</p>

</div>
<!-- EDIT9 SECTION "Mixins" [1596-1809] -->
<h2 class="sectionedit10"><a name="runloop" id="runloop">RunLoop</a></h2>
<div class="level2">

<p>

The RunLoop is a concept to prevent your application having to run constantly, which is not useful in a event based environment. <a href="/~sproutcore/doku.php?id=concepts:sproutcore:runloop" class="wikilink1" title="concepts:sproutcore:runloop"> More ...</a>

</p>

</div>
<!-- EDIT10 SECTION "RunLoop" [1810-] -->