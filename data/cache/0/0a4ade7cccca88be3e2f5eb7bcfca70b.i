a:64:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:45:"Concepts used inside the Sproutcore framework";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:62;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"MVC: Model-View-Controller";i:1;i:2;i:2;i:62;}i:2;i:62;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:62;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:100;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:296:"
Sproutcore is an implementation of the Model-View-Controller development paradigm. In implementing this paradigm, the framework follows the implementation model as used in Cocoa/NeXTStep. Two concepts are of major importance in this model: the inheritance model and the observer/binding pattern.";}i:2;i:101;}i:8;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:397;}i:9;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:399;}i:10;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Inheritance model";i:1;i:3;i:2;i:399;}i:2;i:399;}i:11;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:399;}i:12;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:426;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:265:"
Cocoa is an Object Oriented MVC implementation, in which all objects inherit from a single base object. This base object defines standard behaviour and properties that should be shared by every object in the framework. Sproutcore shares this implementation model. ";}i:2;i:427;}i:14;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:11:"inheritance";i:1;s:9:" More... ";}i:2;i:692;}i:15;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:717;}i:16;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:719;}i:17;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:35:"Roles of Model, View and Controller";i:1;i:3;i:2;i:719;}i:2;i:719;}i:18;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:719;}i:19;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:764;}i:20;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:144:"
In Cocoa the roles of Models, Views and Controllers can deviate from what you are expecting, in the sense that the divisions are quite strict. ";}i:2;i:765;}i:21;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:8:"mvcroles";i:1;s:9:" More... ";}i:2;i:909;}i:22;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:931;}i:23;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:933;}i:24;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"Observer/binding pattern";i:1;i:2;i:2;i:933;}i:2;i:933;}i:25;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:933;}i:26;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:971;}i:27;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Bindings";i:1;i:3;i:2;i:971;}i:2;i:971;}i:28;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:971;}i:29;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:990;}i:30;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:205:"
To prevent having to write code to update every value in every controller and view, SC uses a binding: a link you define which binds the value from a property on a controller or view to a local property. ";}i:2;i:991;}i:31;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:8:"bindings";i:1;s:9:" More ...";}i:2;i:1196;}i:32;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1218;}i:33;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1220;}i:34;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"Observers";i:1;i:3;i:2;i:1220;}i:2;i:1220;}i:35;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1220;}i:36;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1239;}i:37;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:169:"
Observers are special type of functions. These functions are executed whenever a property they observe changes value. Observers are intended to be used within objects. ";}i:2;i:1240;}i:38;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:9:"observers";i:1;s:9:" More... ";}i:2;i:1409;}i:39;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1432;}i:40;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1434;}i:41;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"Getters and Setters";i:1;i:3;i:2;i:1434;}i:2;i:1434;}i:42;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1434;}i:43;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1463;}i:44;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:102:"
In order to make bindings and observers work inside JavaScript, Sproutcore uses getters and setters. ";}i:2;i:1464;}i:45;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:14:"getterssetters";i:1;s:8:" More...";}i:2;i:1566;}i:46;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1593;}i:47;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1596;}i:48;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:6:"Mixins";i:1;i:2;i:2;i:1596;}i:2;i:1596;}i:49;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1596;}i:50;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1614;}i:51;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:172:"
In order to do multiple inheritance without having the hassle to deal with multiple origin changes (which is one of the nastiest parts of OO), SC uses the Mixins concept. ";}i:2;i:1615;}i:52;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:6:"mixins";i:1;s:9:" More ...";}i:2;i:1787;}i:53;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1807;}i:54;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1810;}i:55;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"RunLoop";i:1;i:2;i:2;i:1810;}i:2;i:1810;}i:56;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1810;}i:57;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1829;}i:58;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:130:"
The RunLoop is a concept to prevent your application having to run constantly, which is not useful in a event based environment. ";}i:2;i:1830;}i:59;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:7:"runloop";i:1;s:9:" More ...";}i:2;i:1960;}i:60;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"
";}i:2;i:1981;}i:61;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1981;}i:62;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1981;}i:63;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:1981;}}