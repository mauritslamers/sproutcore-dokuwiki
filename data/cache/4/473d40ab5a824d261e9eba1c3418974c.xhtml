
<h1 class="sectionedit1"><a name="concepts_in_use_in_sc" id="concepts_in_use_in_sc">Concepts in use in SC</a></h1>
<div class="level1">

<p>
SC follows the Cocoa/NeXTStep implementation model of the MVC design pattern. Two concepts are used from Cocoa:
</p>

</div>
<!-- EDIT1 SECTION "Concepts in use in SC" [1-151] -->
<h2 class="sectionedit2"><a name="inheritance_model" id="inheritance_model">Inheritance model</a></h2>
<div class="level2">

<p>

Default behaviour is defined in a base object and every object in the system needing that behaviour inherits from that base object. 
So, every object inside an SC app inherits from SC.Object. Next a set of first level inheritance objects exists, like SC.View and SC.Controller,
which define default behaviour for views, controllers. All types of controllers will need to inherit from SC.Controller to be used as a controller inside an SC app.
</p>

</div>
<!-- EDIT2 SECTION "Inheritance model" [152-626] -->
<h2 class="sectionedit3"><a name="observer_binding_pattern" id="observer_binding_pattern">Observer/binding pattern</a></h2>
<div class="level2">

</div>
<!-- EDIT3 SECTION "Observer/binding pattern" [627-664] -->
<h3 class="sectionedit4"><a name="bindings" id="bindings">Bindings</a></h3>
<div class="level3">

<p>

To prevent having to write code to update every value in every controller and view, SC uses a binding: a link you define which binds the value from a property on a controller or view to a local property. Bindings are used for inter-object communication. Because of this binding magic, you never have to set values to your views manually, you just bind the views properties (that matter) to properties on the controller you want to use to control the view. Setting a value to the controller will automatically update the view. 
</p>

</div>
<!-- EDIT4 SECTION "Bindings" [665-1213] -->
<h3 class="sectionedit5"><a name="observers" id="observers">Observers</a></h3>
<div class="level3">

<p>

Observers are special type of functions. These functions are executed whenever a property they observe changes value.
Observers are used for internal object matters and internal object matters only. 
You have to be aware though of the danger of observers: endless loops. If the observer changes a value that indirectly also changes the value it is observing, there will most certainly result in an endless loop.
</p>

</div>
<!-- EDIT5 SECTION "Observers" [1214-1648] -->
<h3 class="sectionedit6"><a name="inter-object_observing" id="inter-object_observing">Inter-object observing</a></h3>
<div class="level3">

<p>

To have an inter-object observer, create a binding to that value, and then create an observer observing the value.
</p>

</div>
<!-- EDIT6 SECTION "Inter-object observing" [1649-1798] -->
<h3 class="sectionedit7"><a name="how_does_sc_implement_this_in_js" id="how_does_sc_implement_this_in_js">How does SC implement this in JS</a></h3>
<div class="level3">

<p>

In order to make this work inside JavaScript, using the getters and setters is essential. If you want to update a property and want to have the observers watching that property to fire, you need to use the .set() function to set the value. The firing of the observers caused by this set function takes place as part of the RunLoop (see below for a short explanation on that concept).
</p>

</div>
<!-- EDIT7 SECTION "How does SC implement this in JS" [1799-2227] -->
<h3 class="sectionedit8"><a name="examples" id="examples">Examples</a></h3>
<div class="level3">

<p>

Simple observer: 
</p>
<pre class="code">myApp.myController = SC.Controller.extend({
    
    property: 1,
    
    property2: 0,
    
    propObs: function(){ 
       var val = this.get(&#039;property&#039;); 
       this.set(&#039;property2&#039;,val+1); 
    }.observes(&#039;property&#039;)
}</pre>

</div>
<!-- EDIT8 SECTION "Examples" [2228-2509] -->
<h2 class="sectionedit9"><a name="mixins" id="mixins">Mixins</a></h2>
<div class="level2">

<p>

In order to do multiple inheritance without having the hassle to deal with multiple origin changes (which is one of the nastiest parts of OO), SC copied Rubys MixIn feature. a mixin is used when you want to copy behaviour without keeping a connection with the object that originally defined that behaviour.
A mixin is literally copied onto the object you want it to be on…
</p>

</div>
<!-- EDIT9 SECTION "Mixins" [2510-2906] -->
<h2 class="sectionedit10"><a name="runloop" id="runloop">RunLoop</a></h2>
<div class="level2">

<p>

The RunLoop is a concept to prevent the application having to run constantly. As JavaScript is event based, a constantly running application wouldn&#039;t work well, and would need much resources. So, what happens is that as soon as an event has finished, an SC.RunLoop is started to propagate all changes throughout the entire application, and fire all observers and bindings. In a browser the RunLoop is mostly executed after every event supported by the browser, such as mouseover, onclick etc…
</p>

</div>
<!-- EDIT10 SECTION "RunLoop" [2907-] -->